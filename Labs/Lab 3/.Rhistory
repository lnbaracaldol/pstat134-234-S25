sp = SpatialPoints(unique(coordinates(df))),     # unique spatial points
time = time_index,                               # time vector
data = df                                         # full data
)
?STFDF
class(data)
class(df)
df <- read.csv("STD_CalCOFI_final_merged_data.csv")
View(df)
setwd("~/Documents/UCSB/UCSB Dell/Teaching/Capstone/Selection")
# Load required libraries
library(tidyverse)
# Read the CSV file
df <- read_csv("PSTAT-Capstone-2025-Group-Assignments.csv")
df
# Reshape to long format
df_long <- df %>%
pivot_longer(cols = starts_with("Student"), names_to = "role", values_to = "student") %>%
select(Group, student)
# Check total students
stopifnot(nrow(df_long) == 60)
df_long
# Read the CSV file
df <- read_csv("PSTAT-Capstone-2025-Group-Assignments.csv")
# Read the CSV file
df <- read_csv("PSTAT-Capstone-2025-Group-Assignments.csv")
# Load required libraries
library(tidyverse)
# Read the CSV file
df <- read_csv("PSTAT-Capstone-2025-Group-Assignments.csv")
# Reshape to long format
df_long <- df %>%
pivot_longer(cols = starts_with("Student"), names_to = "role", values_to = "student") %>%
select(Group, student)
# Check total students
stopifnot(nrow(df_long) == 60)
df_long
df_long[7:20,]
nrow(df_long)
# Reshape to long format
df_long <- df %>%
pivot_longer(cols = starts_with("Student"), names_to = "role", values_to = "student") %>%
select(Group, student) %>% filter(!is.na(student))
# Check total students
stopifnot(nrow(df_long) == 60)
df_long
str(df)
# Create an empty list to hold balanced groups
num_groups <- 60 / 9  # should be 6.666 — need to make 7 groups of ~9
target_group_size <- 9
students <- df_long
# Try to assign students randomly ensuring group diversity
set.seed(42)
valid_assignment <- FALSE
max_tries <- 1000
tries <- 0
while (!valid_assignment && tries < max_tries) {
tries <- tries + 1
# Randomly shuffle
students_shuffled <- students %>% slice_sample(prop = 1)
# Try splitting into 7 groups of 9
students_shuffled$assigned_group <- rep(1:7, length.out = nrow(students_shuffled))
# Check condition: no two students from same original Group in same assigned_group
check <- students_shuffled %>%
group_by(assigned_group, Group) %>%
tally() %>%
filter(n > 1)
if (nrow(check) == 0) {
valid_assignment <- TRUE
}
}
if (valid_assignment) {
print("✅ Successful assignment!")
write_csv(students_shuffled, "student_cross_groups.csv")
} else {
print("❌ Could not find a valid assignment in 1000 tries.")
}
students_shuffled
7*9
# Try to assign students randomly ensuring group diversity
set.seed(42)
valid_assignment <- FALSE
max_tries <- 1000
tries <- 0
while (!valid_assignment && tries < max_tries) {
tries <- tries + 1
# Randomly shuffle
students_shuffled <- students %>% slice_sample(prop = 1)
# Try splitting into 7 groups of 9
students_shuffled$assigned_group <- rep(1:7, length.out = nrow(students_shuffled))
# Check condition: no two students from same original Group in same assigned_group
check <- students_shuffled %>%
group_by(assigned_group, Group) %>%
tally() %>%
filter(n > 1)
if (nrow(check) == 0) {
valid_assignment <- TRUE
}
}
if (valid_assignment) {
print("✅ Successful assignment!")
write_csv(students_shuffled, "student_cross_groups.csv")
} else {
print("❌ Could not find a valid assignment in 1000 tries.")
}
# Try to assign students randomly ensuring group diversity
set.seed(42)
valid_assignment <- FALSE
max_tries <- 1000
tries <- 0
while (!valid_assignment && tries < max_tries) {
tries <- tries + 1
# Randomly shuffle
students_shuffled <- students %>% slice_sample(prop = 1)
# Try splitting into 7 groups of 9
students_shuffled$assigned_group <- rep(1:7, length.out = nrow(students_shuffled))
# Check condition: no two students from same original Group in same assigned_group
check <- students_shuffled %>%
group_by(assigned_group, Group) %>%
tally() %>%
filter(n > 1)
if (nrow(check) == 0) {
valid_assignment <- TRUE
}
}
if (valid_assignment) {
print("✅ Successful assignment!")
write_csv(students_shuffled, "student_cross_groups.csv")
} else {
print("❌ Could not find a valid assignment in 1000 tries.")
}
students_shuffled
write_csv(students_shuffled, "student_cross_groups.csv")
# Check total students
stopifnot(nrow(df_long) == 60)
# Shuffle within each project to add randomness
df_long <- df_long %>%
group_by(project) %>%
mutate(student = sample(student)) %>%
ungroup()
df_long
# Shuffle within each project to add randomness
df_long <- df_long %>%
group_by(Group) %>%
mutate(student = sample(student)) %>%
ungroup()
# Initialize empty result list
group_list <- vector("list", length = 7)
for (i in 1:7) group_list[[i]] <- tibble(student = character(), project = character())
# Assign students in a round-robin manner ensuring constraints
for (proj in unique(df_long$project)) {
stu_proj <- df_long %>% filter(project == proj)
# Try to assign each student to a different group
assigned <- 0
for (s in stu_proj$student) {
for (i in 1:7) {
group_i <- group_list[[i]]
if (!(proj %in% group_i$project)) {
group_list[[i]] <- bind_rows(group_i, tibble(student = s, project = proj))
assigned <- assigned + 1
break
}
}
}
if (assigned < nrow(stu_proj)) {
stop(paste("Could not assign all students from project", proj, "without conflict"))
}
}
# Shuffle within each Group to add randomness
df_long <- df_long %>%
group_by(Group) %>%
mutate(student = sample(student)) %>%
ungroup()
# Initialize empty result list
group_list <- vector("list", length = 7)
for (i in 1:7) group_list[[i]] <- tibble(student = character(), Group = character())
# Assign students in a round-robin manner ensuring constraints
for (proj in unique(df_long$Group)) {
stu_proj <- df_long %>% filter(Group == proj)
# Try to assign each student to a different group
assigned <- 0
for (s in stu_proj$student) {
for (i in 1:7) {
group_i <- group_list[[i]]
if (!(proj %in% group_i$Group)) {
group_list[[i]] <- bind_rows(group_i, tibble(student = s, Group = proj))
assigned <- assigned + 1
break
}
}
}
if (assigned < nrow(stu_proj)) {
stop(paste("Could not assign all students from project", proj, "without conflict"))
}
}
df_long <- df %>%
pivot_longer(cols = starts_with("Student"), names_to = "role", values_to = "student") %>%
filter(!is.na(student)) %>%
select(project = Group, student)
# Check total students
stopifnot(nrow(df_long) == 60)
# Shuffle within each project to add randomness
df_long <- df_long %>%
group_by(project) %>%
mutate(student = sample(student)) %>%
ungroup()
# Initialize empty result list
group_list <- vector("list", length = 7)
for (i in 1:7) group_list[[i]] <- tibble(student = character(), project = character())
# Assign students in a round-robin manner ensuring constraints
for (proj in unique(df_long$project)) {
stu_proj <- df_long %>% filter(project == proj)
# Try to assign each student to a different group
assigned <- 0
for (s in stu_proj$student) {
for (i in 1:7) {
group_i <- group_list[[i]]
if (!(proj %in% group_i$project)) {
group_list[[i]] <- bind_rows(group_i, tibble(student = s, project = proj))
assigned <- assigned + 1
break
}
}
}
if (assigned < nrow(stu_proj)) {
stop(paste("Could not assign all students from project", proj, "without conflict"))
}
}
# Combine and label final groups
final_df <- bind_rows(lapply(seq_along(group_list), function(i) {
group_list[[i]] %>% mutate(final_group = paste0("G", i))
}))
unique(df_long$project)
proj<- 1
stu_proj <- df_long %>% filter(project == proj)
# Try to assign each student to a different group
assigned <- 0
for (s in stu_proj$student) {
for (i in 1:7) {
group_i <- group_list[[i]]
if (!(proj %in% group_i$project)) {
group_list[[i]] <- bind_rows(group_i, tibble(student = s, project = proj))
assigned <- assigned + 1
break
}
}
}
stu_proj$student
# Reshape to long format
df_long <- df %>%
pivot_longer(cols = starts_with("Student"), names_to = "role", values_to = "student") %>%
filter(!is.na(student)) %>%
select(project = Group, student)
# Shuffle students within each project
df_long <- df_long %>%
group_by(project) %>%
mutate(student = sample(student)) %>%
ungroup()
nrow(df_long )
# Create a list of remaining students per project
project_lists <- df_long %>%
group_split(project) %>%
setNames(unique(df_long$project))
# Initialize result container
result <- tibble()
group_counter <- 1
repeat {
group <- tibble()
for (proj in names(project_lists)) {
proj_students <- project_lists[[proj]]
if (nrow(proj_students) > 0 && nrow(group) < 9) {
group <- bind_rows(group, proj_students[1, ])
project_lists[[proj]] <- proj_students[-1, ]
}
}
if (nrow(group) == 0) break
group <- group %>%
mutate(final_group = paste0("G", group_counter))
result <- bind_rows(result, group)
group_counter <- group_counter + 1
}
# Save the output
write_csv(result, "student_cross_groups.csv")
df_long <- df %>%
pivot_longer(cols = starts_with("Student"), names_to = "slot", values_to = "student") %>%
filter(!is.na(student)) %>%
select(project = Group, student)
# Shuffle students within project
df_shuffled <- df_long %>%
group_by(project) %>%
mutate(student = sample(student)) %>%
ungroup()
# Create a queue of students organized by project
project_queues <- split(df_shuffled, df_shuffled$project)
# Number of target groups
num_groups <- ceiling(nrow(df_shuffled) / 9)
group_buckets <- vector("list", num_groups)
for (i in 1:num_groups) group_buckets[[i]] <- tibble()
# Round-robin assign: cycle through project_queues and assign to next group
group_index <- 1
while (any(sapply(project_queues, nrow) > 0)) {
for (proj in names(project_queues)) {
if (nrow(project_queues[[proj]]) > 0) {
# Assign to current group
student_row <- project_queues[[proj]][1, ]
project_queues[[proj]] <- project_queues[[proj]][-1, ]
# Ensure no one from same project is already in that group
while (proj %in% group_buckets[[group_index]]$project) {
group_index <- (group_index %% num_groups) + 1
}
group_buckets[[group_index]] <- bind_rows(group_buckets[[group_index]], student_row)
# Move to next group
group_index <- (group_index %% num_groups) + 1
}
}
}
df_long
# Shuffle students within project
df_shuffled <- df_long %>%
group_by(project) %>%
mutate(student = sample(student)) %>%
ungroup()
df_shuffled
# Combine and label
final_groups <- bind_rows(lapply(seq_along(group_buckets), function(i) {
group_buckets[[i]] %>% mutate(final_group = paste0("G", i))
}))
# Save
write_csv(final_groups, "student_cross_groups.csv")
final_groups
print(final_groups %>% count(final_group))
60/7
library(tidyverse)
# install.packages("rvest")
library(rvest)
# install.packages("xml2")
library(xml2)
html <- read_html("https://www.allsides.com/media-bias/ratings")
library(httr)
page <- read_html(GET("https://www.allsides.com/media-bias/ratings",
user_agent("Mozilla/5.0 (Windows NT 10.0; Win64; x64)")))
curl::has_internet()
curl::curl_fetch_memory("https://www.allsides.com/media-bias/ratings")
getwd()
setwd("~/Documents/UCSB/UCSB Dell/Teaching/PSTAT-134-Spring2025/Labs/Lab 3")
system("ls")
html <- read_html("MediaBiasRatings _ AllSides.html")
write_html(html, file = "lab-3-data.html")
html <- read_html(x = "lab-3-data.html")
table_rows <- html %>%
html_elements("tbody") %>%
html_elements("tr")
source_titles <- table_rows %>%
html_elements(".source-title") %>%
html_text2()
source_titles
table_rows %>%
html_elements("[href]") %>%
html_text2()
table_rows %>%
html_elements("a") %>%
html_text2()
table_rows %>%
html_elements("views-field views-field-title source-title") %>%
html_text2()
table_rows %>%
html_elements(".views-field views-field-title source-title") %>%
html_text2()
source_titles <- table_rows %>%
html_elements(".source-title") %>%
html_text2()
source_links <- paste0("https://www.allsides.com",
(table_rows %>%
html_elements(".source-title") %>%
html_elements("a") %>%
html_attr("href")))
source_links <- paste0("https://www.allsides.com",
(table_rows %>%
html_elements(".source-title") %>%
html_elements("[href]")
)
)
source_links <- paste0("https://www.allsides.com",
(table_rows %>%
html_elements(".source-title") %>%
html_elements("[href]")%>%
html_text2()))
source_links
source_links <- paste0("https://www.allsides.com",
(table_rows %>%
html_elements(".source-title") %>%
html_elements("a") %>%
html_attr("href")))
source_links
source_titles <- table_rows %>%
html_elements(".source-title") %>%
html_text2()
source_links <- paste0("https://www.allsides.com",
(table_rows %>%
html_elements(".source-title") %>%
html_elements("a") %>%
html_attr("href")))
source_links
(table_rows %>%
+                           html_elements(".source-title") %>%
+                           html_elements("a") %>%
+                           html_attr("href"))
source_bias <- table_rows %>%
html_elements(".views-field-field-bias-image") %>%
html_elements("a") %>%
html_attr("href") %>%
str_remove("/media-bias/")
source_bias
table_rows %>%
html_elements(".commtext")
html <- read_html("https://www.allsides.com/media-bias/ratings")
source_agreement
source_titles <- table_rows %>%
html_elements(".source-title") %>%
html_text2()
source_links <- paste0("https://www.allsides.com",
(table_rows %>%
html_elements(".source-title") %>%
html_elements("a") %>%
html_attr("href")))
source_bias <- table_rows %>%
html_elements(".views-field-field-bias-image") %>%
html_elements("a") %>%
html_attr("href") %>%
str_remove("/media-bias/")
source_agree <- table_rows %>%
html_element(".agree") %>%
html_text2() %>%
as.numeric()
source_disagree <- table_rows %>%
html_element(".disagree") %>%
html_text2() %>%
as.numeric()
source_agree_ratio <- source_agree/source_disagree
source_agreement <- get_agreement_text(source_agree_ratio)
get_agreement_text <- function(ratio) {
case_when(
ratio > 3 ~ "absolutely agrees",
ratio > 2 & ratio <= 3 ~ "strongly agrees",
ratio > 1.5 & ratio <= 2 ~ "agrees",
ratio > 1 & ratio <= 1.5 ~ "somewhat agrees",
ratio == 1 ~ "neutral",
ratio > 0.67 & ratio < 1 ~ "somewhat disagrees",
ratio > 0.5 & ratio <= 0.67 ~ "disagrees",
ratio > 0.33 & ratio <= 0.5 ~ "strongly disagrees",
ratio <= 0.33 ~ "absolutely disagrees"
)
}
# Let's verify that the function works:
get_agreement_text(1)
source_agree_ratio <- source_agree/source_disagree
source_agreement <- get_agreement_text(source_agree_ratio)
source_agreement
table_rows %>%
html_elements(".commtext") %>% html_text2()
table_rows %>%
html_elements(".commtext") %>% html_text2() %>% mutate(remove("Community "))
table_rows %>%
html_elements(".commtext") %>% html_text2()
table_rows %>%
html_elements(".commtext") %>% html_text2() %>% str_remove("^Community\\s+")
urls <- c("https://www.allsides.com/media-bias/ratings",
"https://www.allsides.com/media-bias/ratings?page=2",
"https://www.allsides.com/media-bias/ratings?page=3")
for(i in 1:length(urls)){
html <- read_html(urls[i])
table_rows <- html %>%
html_elements("tbody") %>%
html_elements("tr")
extract_data(table_rows) # Notice this is not a real function;
# instead you would run whatever code you'd created to extract the data.
Sys.sleep(10) # to wait 10 seconds between requests
}
html <- read_html("https://www.allsides.com/media-bias/ratings")
library(tidyverse)
# install.packages("rvest")
library(rvest)
# install.packages("xml2")
library(xml2)
library(httr)
html <- read_html("https://www.allsides.com/media-bias/ratings")
install.packages("RSelenium", lib="/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library")
library(RSelenium)
# Start a browser session
rD <- rsDriver(browser = "firefox", port = 4545L)
remDr <- rD[["client"]]
# Navigate to the page
remDr$navigate("https://www.allsides.com/media-bias/ratings")
remDr$navigate("https://www.allsides.com/media-bias/ratings")
url <- "https://www.allsides.com/media-bias/ratings"
length(url)   # Should be 1
is.character(url)  # Should be TRUE
remDr$navigate(url)
rD <- rsDriver(browser = "firefox")
remDr <- rD$client
remDr
.rs.restartR()
# Then run fresh:
library(RSelenium)
rD <- rsDriver(browser = "firefox", port = 4567L, verbose = FALSE)
library(RSelenium)
rD <- rsDriver(browser = "firefox", port = 4567L, verbose = FALSE)
reticulate::repl_python()
library(reticulate)
use_condaenv("pstat134-234", required = TRUE) #specify here your env
# py_install("beautifulsoup4")
reticulate::repl_python()
